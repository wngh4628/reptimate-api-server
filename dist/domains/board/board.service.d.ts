/// <reference types="multer" />
import { createBoardDto } from './dtos/create-board.dto';
import { BoardRepository } from './repositories/board.repository';
import { BoardImage } from './entities/board-image.entity';
import { Board } from './entities/board.entity';
import { Page, PageRequest } from 'src/core/page';
import { UpdateBoardDto } from './dtos/update-board.dto';
import { User } from 'src/domains/user/entities/user.entity';
import { CommentDto } from './dtos/board-comment.dto';
import Comment from './entities/board-comment.entity';
import { BoardCommentRepository } from './repositories/board-comment.repository';
import { BoardImageRepository } from './repositories/board-image.repository';
import BoardReply from './entities/board-reply.entity';
import BoardComment from './entities/board-comment.entity';
import { BoardReplyRepository } from './repositories/board-reply.repository';
import { BoardBookmarkRepository } from './repositories/board-bookmark.repository';
import { Bookmark } from './entities/board-bookmark.entity';
import { BoardCommercialRepository } from './repositories/board-commercial.repository';
import { UserRepository } from '../user/repositories/user.repository';
import { BoardListDto } from './dtos/board-list.dto';
import { DataSource, QueryRunner } from 'typeorm';
import { RedisService } from '@liaoliaots/nestjs-redis';
import { BoardAuctionRepository } from './repositories/board-auction.repository';
import { BoardCategoryPageRequest } from './dtos/board-category-page';
import { LiveStreamRepository } from '../live_stream/repositories/live-stream.repository';
import { UpdateStreamKeyDto } from './dtos/update-stream-key.dto';
import { ClientRecommend } from 'src/utils/client-recommend';
import { BoardElasticSearch } from './providers/elastic-search';
export declare class BoardService {
    private boardRepository;
    private userRepository;
    private boardImageRepository;
    private commentRepository;
    private replyRepository;
    private boardBookmarkRepository;
    private boardCommercialRepository;
    private dataSource;
    private readonly redisService;
    private boardAuctionRepository;
    private liveStreamRepository;
    private clientRecommend;
    private boardElasticSearch;
    constructor(boardRepository: BoardRepository, userRepository: UserRepository, boardImageRepository: BoardImageRepository, commentRepository: BoardCommentRepository, replyRepository: BoardReplyRepository, boardBookmarkRepository: BoardBookmarkRepository, boardCommercialRepository: BoardCommercialRepository, dataSource: DataSource, redisService: RedisService, boardAuctionRepository: BoardAuctionRepository, liveStreamRepository: LiveStreamRepository, clientRecommend: ClientRecommend, boardElasticSearch: BoardElasticSearch);
    createBoard(dto: createBoardDto, userIdx: number): Promise<Board>;
    findAllBoard(pageRequest: BoardCategoryPageRequest): Promise<Page<BoardListDto>>;
    findAuction(pageRequest: BoardCategoryPageRequest): Promise<Page<BoardListDto>>;
    findBoard(boardIdx: number, userIdx: number): Promise<BoardListDto>;
    removeBoard(boardIdx: number, userIdx: number): Promise<void>;
    deleteBoardImages(images: BoardImage[]): Promise<void>;
    updateBoard(boardIdx: number, dto: UpdateBoardDto, user: User): Promise<Board>;
    updateStreamKey(boardAuctionIdx: number, dto: UpdateStreamKeyDto): Promise<string>;
    createComment(dto: CommentDto, userIdx: number, file: Express.Multer.File): Promise<Comment>;
    removeComment(commentIdx: number, boardIdx: number, userIdx: number, category: string): Promise<number>;
    countComment(table: string, boardIdx: number, queryRunner: QueryRunner): Promise<number>;
    findBoardComment(pageRequest: PageRequest, boardIdx: number, category: string): Promise<Page<BoardComment> | Page<BoardReply>>;
    updateComment(dto: CommentDto, commentIdx: number, userIdx: number, file: Express.Multer.File): Promise<Comment | BoardReply>;
    RegisterBoardBookmark(boardIdx: number, userIdx: number, category: string): Promise<Bookmark>;
    boardBookmarkRemove(boardIdx: number, userIdx: number): Promise<import("typeorm").UpdateResult>;
    findUserInfo: (result: any) => Promise<{
        idx: number;
        nickname: string;
        profilePath: string;
    }>;
    isCommercialCate(category: string): Promise<boolean>;
    isAuctionCate(category: string): Promise<boolean>;
    findRecommendItem(userIdx: number): Promise<BoardListDto[]>;
    searchTotal(keyword: string): Promise<any>;
    searchCategory(keyword: string, pageRequest: BoardCategoryPageRequest): Promise<any>;
}
